import os
import requests
from tqdm import tqdm
import time
from datetime import datetime

# ASCII art banner
banner = """
   â–„â–„â–„â–„â–ˆâ–ˆâ–ˆâ–„â–„â–„â–„      â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–„â–ˆ             â–„â–ˆ     â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„         â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–„â–ˆ  â–ˆâ–ˆâ–ˆâ–„â–„â–„â–„   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„     â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 
 â–„â–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆâ–„   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ            â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ        â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆâ–„ â–ˆâ–ˆâ–ˆ   â–€â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ 
 â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ            â–ˆâ–ˆâ–ˆâ–Œ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ        â–ˆâ–ˆâ–ˆ    â–ˆâ–€  â–ˆâ–ˆâ–ˆâ–Œ â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–€    â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ 
 â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ            â–ˆâ–ˆâ–ˆâ–Œ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ       â–„â–ˆâ–ˆâ–ˆâ–„â–„â–„     â–ˆâ–ˆâ–ˆâ–Œ â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ  â–„â–ˆâ–ˆâ–ˆâ–„â–„â–„      â–„â–ˆâ–ˆâ–ˆâ–„â–„â–„â–„â–ˆâ–ˆâ–€ 
 â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ            â–ˆâ–ˆâ–ˆâ–Œ â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€       â–€â–€â–ˆâ–ˆâ–ˆâ–€â–€â–€     â–ˆâ–ˆâ–ˆâ–Œ â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–€â–€â–ˆâ–ˆâ–ˆâ–€â–€â–€     â–€â–€â–ˆâ–ˆâ–ˆâ–€â–€â–€â–€â–€   
 â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ            â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ               â–ˆâ–ˆâ–ˆ        â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–„  â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 
 â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–Œ    â–„      â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ               â–ˆâ–ˆâ–ˆ        â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ   â–„â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ 
  â–€â–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–€    â–ˆâ–ˆâ–ˆ    â–ˆâ–€  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„â–„â–ˆâ–ˆ      â–ˆâ–€    â–„â–ˆâ–ˆâ–ˆâ–ˆâ–€             â–ˆâ–ˆâ–ˆ        â–ˆâ–€    â–€â–ˆ   â–ˆâ–€  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€    â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ 
                              â–€                                                                                           â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ 
"""

print(banner)

def check_ip_malicious(ip_address, api_key):
    url = f'https://api.abuseipdb.com/api/v2/check?ipAddress={ip_address}&maxAgeInDays=90'
    headers = {
        'Key': api_key,
        'Accept': 'application/json'
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        try:
            data = response.json()['data']
            abuse_score = data.get('abuseConfidenceScore', 'N/A')
            is_malicious = abuse_score > 20 if isinstance(abuse_score, int) else 'Unknown'

            result = f"Checked at        : {datetime.now()}\n"
            result += f"IP Address        : {ip_address}\n"
            result += f"Malicious         : {'Yes' if is_malicious else 'No'}\n"
            result += f"Abuse Score       : {abuse_score}\n"
            result += f"Country           : {data.get('countryCode', 'N/A')}\n"
            result += f"Usage Type        : {data.get('usageType', 'N/A')}\n"
            result += f"ISP               : {data.get('isp', 'N/A')}\n"
            result += f"Domain            : {data.get('domain', 'N/A')}\n"
            result += f"Hostnames         : {', '.join(data.get('hostnames', [])) or 'N/A'}\n"
            result += f"Total Reports     : {data.get('totalReports', 'N/A')}\n"
            result += f"Unique Reporters  : {data.get('numDistinctUsers', 'N/A')}\n"
            result += f"Last Reported At  : {data.get('lastReportedAt', 'N/A')}\n"
            result += f"AbuseIPDB URL     : https://www.abuseipdb.com/check/{ip_address}\n"
        except Exception as e:
            result = f"Error parsing response for {ip_address}: {str(e)}\n"
    else:
        result = f"Error checking {ip_address}: {response.status_code} - {response.text}\n"

    return result

# === CONFIGURATION ===
# Replace this with your real key, or use: os.getenv("ABUSEIPDB_API_KEY")
API_KEY = 'd8de94dcaa9e8be45f54d2f1d56fc1c6c0d9ad574457c902fd64825365c9dc2e32c298b83d864d88'

# === MAIN EXECUTION ===

# Load IP addresses from file
with open('ip_addresses.txt', 'r') as file:
    ip_addresses = [line.strip() for line in file.readlines() if line.strip()]

# Ask for output file name
output_file_name = input("Enter the name for the output file (e.g., output.txt): ")

# Show progress bar while processing
with tqdm(total=len(ip_addresses), desc="Checking IPs") as pbar:
    with open(output_file_name, 'w') as output_file:
        for ip in ip_addresses:
            output = check_ip_malicious(ip, API_KEY)
            output_file.write(output)
            output_file.write("-" * 70 + "\n")
            pbar.update(1)
            time.sleep(0.5)  # Add delay to respect rate limits

print("\nOutput saved to:", os.path.abspath(output_file_name))
print("Thanks for using the tool. Made with <3 in India ðŸ‡®ðŸ‡³")
